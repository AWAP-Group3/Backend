"use strict";exports.id=459,exports.ids=[459],exports.modules={14459:(e,t,r)=>{async function o(e,t,{concurrency:r=Number.POSITIVE_INFINITY,stopOnError:o=!0,signal:a}={}){return new Promise(((i,s)=>{if(void 0===e[Symbol.iterator]&&void 0===e[Symbol.asyncIterator])throw new TypeError(`Expected \`input\` to be either an \`Iterable\` or \`AsyncIterable\`, got (${typeof e})`);if("function"!=typeof t)throw new TypeError("Mapper function is required");if(!(Number.isSafeInteger(r)&&r>=1||r===Number.POSITIVE_INFINITY))throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${r}\` (${typeof r})`);const c=[],y=[],f=new Map;let u=!1,p=!1,b=!1,d=0,l=0;const I=void 0===e[Symbol.iterator]?e[Symbol.asyncIterator]():e[Symbol.iterator](),w=()=>{g(a.reason)},m=()=>{a?.removeEventListener("abort",w)},E=e=>{i(e),m()},g=e=>{u=!0,p=!0,s(e),m()};a&&(a.aborted&&g(a.reason),a.addEventListener("abort",w,{once:!0}));const h=async()=>{if(p)return;const e=await I.next(),r=l;if(l++,e.done){if(b=!0,0===d&&!p){if(!o&&y.length>0)return void g(new AggregateError(y));if(p=!0,0===f.size)return void E(c);const e=[];for(const[t,r]of c.entries())f.get(t)!==n&&e.push(r);E(e)}}else d++,(async()=>{try{const o=await e.value;if(p)return;const a=await t(o,r);a===n&&f.set(r,a),c[r]=a,d--,await h()}catch(e){if(o)g(e);else{y.push(e),d--;try{await h()}catch(e){g(e)}}}})()};(async()=>{for(let e=0;e<r;e++){try{await h()}catch(e){g(e);break}if(b||u)break}})()}))}r.d(t,{default:()=>o});const n=Symbol("skip")}};